COMPILER Double

(./*--------------Scanner Especification----------*/.)
(.data class Wrapper ( var value : Double ).)

CHARACTERS

digit = "0123456789" .
tab = CHR(9).
eol = CHR(10).
blanco = eol+CHR(13)+tab+' '.

KEYWORDS

while = "while".
do = "do".

TOKENS

number = digit{digit} EXCEPT KEYWORDS.
decnumber = digit{digit}"."digit{digit}.
white = blanco{blanco}.

PRODUCTIONS

Expr= {Stat ";"{white}}{white}".".

Stat (.val wrapper = Wrapper(.0);.) =
	Expression<.wrapper.>		(.println("Resultado: ${wrapper.value}");.)
	.

Expression<.result : Wrapper.> (.val result1 = Wrapper(.0); val result2 = Wrapper(.0);.) =
	Term<.ref result1.>
	{    "+"Term<.result2.>		(.result1.value += result2.value;.)
	   | "-"Term<.result2.>		(.result1.value -= result2.value;.)
	}								(.result.value = result1.value;.)
	.

Term<.result : Wrapper.> (.val result1 = Wrapper(.0); val result2 = Wrapper(.0);.) =
	Factor<.result1.>
	{    "*"Factor<.result2.>	(.result1.value *= result2.value;.)
	   | "/"Factor<.result2.>	(.result1.value /= result2.value;.)
	}							(.result.value = result1.value;.)
	.


Factor<.result : Wrapper.> (.var sign: Double = 1.0.) =
	["-"						(.sign = -1.0;.)
	]
	(Number<.result.>
	 |"("Expression<.result.>")"
	)							(.result.value *= sign.)
	.

Number<.result : Wrapper.> =
	(number
	|decnumber)(.result.value = lastToken!!.lexeme.toDouble();.)
	.
END Double.
