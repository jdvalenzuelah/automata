COMPILER HexNumber

(./*--------------Scanner Especification----------*/.)
(.data class Wrapper ( var value : Double ).)

CHARACTERS

upletter = 'A'..'Z'.
downletter = 'a'..'z'.
letter = "abcdefghijklmnopqrstuvwxyz" + upletter + downletter.
digit = "0123456789" .
hexdigit = digit + "ABCDEF".
hexterm = 'H'.
tab = CHR(9).
eol = CHR(10).
whitespace = CHR(13)+eol+tab+CHR(13).
sign ='+'+'-'.

KEYWORDS

while = "while".
do = "do".

TOKENS

ident = letter{letter|digit} EXCEPT KEYWORDS.
hexnumber = hexdigit{hexdigit}hexterm EXCEPT KEYWORDS.
number = digit{digit}.
signnumber = [sign]digit{digit}.
whitetoken = whitespace{whitespace}.

PRODUCTIONS

Expr= {Stat ";"{whitetoken}}{whitetoken}".".

Stat (.val wrapper = Wrapper(.0);.) =
	Expression<.wrapper.>		(.println("Resultado: ${wrapper.value.toInt().toString(radix = 16)}");.)
	.

Expression<.result : Wrapper.> (.val result1 = Wrapper(.0); val result2 = Wrapper(.0);.) =
	Term<.result1.>
	{    "+"Term<.result2.>		(.result1.value += result2.value;.)
	   | "-"Term<.result2.>		(.result1.value -= result2.value;.)
	}								(.result.value = result1.value;.)
	.

Term<.result : Wrapper.> (.val result1 = Wrapper(.0); val result2 = Wrapper(.0);.) =
	Factor<.result1.>
	{    "*"Factor<.result2.>	(.result1.value *= result2.value;.)
	   | "/"Factor<.result2.>	(.result1.value /= result2.value;.)
	}							(.result.value = result1.value;.)
	.


Factor<.result : Wrapper.> (.var sign: Double = 1.0.) =
	["-"						(.sign = -1.0;.)
	]
	(Number<.result.>
	|HexNumber<.result.>
	 |"("Expression<.result.>")"
	)							(.result.value *= sign.)
	.

Number<.result : Wrapper.> =
	(number|signnumber) (.result.value = lastToken!!.lexeme.toDouble();.)
	.

HexNumber<.result : Wrapper.> =
	hexnumber (.result.value = lastToken!!.lexeme.trimEnd('H').toInt(radix = 16).toDouble();.)
	.

END Aritmetica
